[
  {
    "idx": 1,
    "title": "객체지향 프로그래밍(Object Oriented Programming)이란?",
    "line_1": "객체지향 프로그래밍이란 모든 것을 상태(attribute)인 변수와 행위(behavior)인 메소드를 가진 객체로 바라보는 방법론입니다.",
    "line_2": "이 방법론은 해당 객체들 간의 상호작용을 통해 프로그래밍을 작동 시킵니다.이 방법론은 해당 객체들 간의 상호작용을 통해 프로그래밍을 작동 시킵니다.",
    "line_3": "객체지향 프로그래밍의 특징적인 요소로는 캡슐화, 상속, 다형성이 있습니다.",
    "line_4": "장점으로는 가독성 및 재사용성에 의한 개발시간 단축 등이 있습니다.",
    "line_5": "단점으로는 다중 상속 등이 되면 복잡해져서 파악하기 어려워집니다."
  },
  {
    "idx": 2,
    "title": "캡슐화(Encapsulation)란?",
    "line_1": "객체지향 프로그래밍에서 캡슐화는 2가지 측면을 갖습니다.",
    "line_2": "첫번째는 객체의 상태와 행위를 하나로 묶는 행위입니다.",
    "line_3": "비슷한 내용의 변수와 메소드를 같이 묶으면 코드의 유지보수가 편리해집니다.",
    "line_4": "두번째는 객체의 내용을 외부로부터 숨깁니다.",
    "line_5": "이것으로 불필요한 데이터의 접근 및 수정 등을 막을 수 있습니다."
  },
  {
    "idx": 3,
    "title": "상속(Inheritance)이란?",
    "line_1": "객체지향에서 상속이란 기존의 객체에 기능을 추가하거나 재정의하여 새로운 객체에 정의하는 것입니다.",
    "line_2": "새로운 객체가 상속을 이용하면 기존 객체의 상태와 행위를 전부 가지게 됩니다.",
    "line_3": "기존의 객체를 부모 객체, 새로운 객체를 자식 객체라고 부르기도 합니다.",
    "line_4": "장점으로는 객체를 재활용하기 편합니다.",
    "line_5": "단점으로는 상속 횟수가 많아질 수록 가독성과 유지보수가 복잡해집니다."
  },
  {
    "idx": 4,
    "title": "다형성(Polymorphism)이란?",
    "line_1": "객체지향에서의 다형성이란 하나의 객체가 여러가지 타입을 가질 수 있는 것을 말합니다.",
    "line_2": "오버라이딩(Overriding), 오버로딩(Overloading)이 기본적인 예에 속합니다.",
    "line_3": "오버라이딩은 상속한 부모 객체의 메소드를 재정의해 덮어씌우는 것을 뜻합니다.",
    "line_4": "오버로딩은 동일한 이름의 메소드를 인자만 다르게 해서 여러 개 정의하는 것을 뜻합니다.",
    "line_5": "장점은 많은 메소드를 이름을 다르게 해서 정의할 필요가 없어지는 편리함이 있습니다."
  },
  {
    "idx": 5,
    "title": "메모리(Memory) 구조는?",
    "line_1": "프로그램의 메모리 구조는 실행할 코드, 데이터 영역, 동적 할당: 힙(Heap), 지역 변수 및 매개 변수: 스택(Stack)으로 나뉩니다.",
    "line_2": "실행할 코드 영역은 변경 되어서는 안되는 영역으로 프로그램이 종료될 때가지 해제되지 않습니다.",
    "line_3": "데이터 영역에는 전역 변수 및 정적 변수가 들어가며 마찬가지로 프로그램이 종료될 때까지 해제되지 않습니다.",
    "line_4": "동적 할당: 힙 영역에는 동적으로 할당되는 변수가 할당 되며 사용이 없어졌을 때 알아서 해제되거나(예: Unity의 GC) 사용자가 직접 해제할 수 있습니다.",
    "line_5": "지역 변수 및 매개 변수: 스택 영역에는 메소드가 호출될 때 사용 되는 인자 및 내부 변수가 저장 되며 해당 메소드가 종료될 때 해제됩니다."
  },
  {
    "idx": 6,
    "title": "메모리(Memory)란?",
    "line_1": "메모리는 컴퓨터의 저장공간을 의미합니다.",
    "line_2": "프로그램은 메모리에 저장되어 실행 되며, 데이터와 코드 등의 정보를 저장할 수 있습니다.",
    "line_3": "컴퓨터가 자동으로 데이터를 할당하며, 프로그래머가 메모리에 데이터를 직접 할당할 수도 있습니다.",
    "line_4": "메모리 관리는 컴퓨터 프로그래밍에 있어서 중요한 요소입니다.",
    "line_5": "메모리가 제대로 관리되지 않으면 메모리 누수, 버그, 메모리 부족으로 인해 프로그램이 제대로 작동하지 않을 수도 있습니다."
  }
]